{"ast":null,"code":"// Minimal WAV encoder for Float32 -> 16-bit PCM WAV\nexport class WavEncoder {\n  static encodeWav(buffer) {\n    const numChannels = buffer.numberOfChannels;\n    const sampleRate = buffer.sampleRate;\n    const length = buffer.length;\n    const samples = new Float32Array(length * numChannels);\n    for (let ch = 0; ch < numChannels; ch++) {\n      const channelData = buffer.getChannelData(ch);\n      for (let i = 0; i < length; i++) {\n        samples[i * numChannels + ch] = channelData[i];\n      }\n    }\n    const bytesPerSample = 2; // 16-bit\n    const blockAlign = numChannels * bytesPerSample;\n    const bufferLength = 44 + samples.length * bytesPerSample;\n    const arrayBuffer = new ArrayBuffer(bufferLength);\n    const view = new DataView(arrayBuffer);\n    function writeString(offset, str) {\n      for (let i = 0; i < str.length; i++) {\n        view.setUint8(offset + i, str.charCodeAt(i));\n      }\n    }\n    let offset = 0;\n    writeString(offset, 'RIFF');\n    offset += 4;\n    view.setUint32(offset, 36 + samples.length * bytesPerSample, true);\n    offset += 4;\n    writeString(offset, 'WAVE');\n    offset += 4;\n    writeString(offset, 'fmt ');\n    offset += 4;\n    view.setUint32(offset, 16, true);\n    offset += 4; // subchunk1 size\n    view.setUint16(offset, 1, true);\n    offset += 2; // PCM\n    view.setUint16(offset, numChannels, true);\n    offset += 2;\n    view.setUint32(offset, sampleRate, true);\n    offset += 4;\n    view.setUint32(offset, sampleRate * blockAlign, true);\n    offset += 4;\n    view.setUint16(offset, blockAlign, true);\n    offset += 2;\n    view.setUint16(offset, bytesPerSample * 8, true);\n    offset += 2;\n    writeString(offset, 'data');\n    offset += 4;\n    view.setUint32(offset, samples.length * bytesPerSample, true);\n    offset += 4;\n    // Write samples\n    let idx = 0;\n    for (let i = 0; i < samples.length; i++, idx += 2) {\n      let s = Math.max(-1, Math.min(1, samples[i]));\n      view.setInt16(offset + idx, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n    }\n    return new Blob([arrayBuffer], {\n      type: 'audio/wav'\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}