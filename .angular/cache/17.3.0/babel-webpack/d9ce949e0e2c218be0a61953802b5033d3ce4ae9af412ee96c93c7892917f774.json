{"ast":null,"code":"import _asyncToGenerator from \"/Users/bharris/Code/audio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { signal } from '@angular/core';\nimport { getModel } from './model-registry';\nimport * as i0 from \"@angular/core\";\nexport let OnnxSeparatorService = /*#__PURE__*/(() => {\n  class OnnxSeparatorService {\n    constructor() {\n      this.worker = null;\n      this.currentModel = signal(null);\n      this.progress = signal(null);\n    }\n    initWorker() {\n      if (this.worker) return;\n      this.worker = new Worker(new URL('../../workers/onnx-separator.worker.ts', import.meta.url), {\n        type: 'module'\n      });\n      this.worker.onmessage = ev => {\n        const data = ev.data;\n        switch (data.kind) {\n          case 'progress':\n            this.progress.set(data);\n            break;\n          case 'ready':\n            this.progress.set({\n              stage: 'done',\n              message: 'Model loaded'\n            });\n            break;\n          case 'result':\n            // handled in separate() via Promise resolver\n            break;\n          case 'error':\n            this.progress.set({\n              stage: 'error',\n              message: data.error\n            });\n            break;\n        }\n      };\n    }\n    loadModel(id) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const info = getModel(id);\n        if (!info) throw new Error('Model not found');\n        _this.currentModel.set(info);\n        _this.initWorker();\n        const req = {\n          type: 'loadModel',\n          model: info\n        };\n        _this.worker.postMessage(req);\n      })();\n    }\n    separate(buffer, opts) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const model = _this2.currentModel();\n        if (!model) throw new Error('Model not loaded');\n        _this2.initWorker();\n        // Resample if needed\n        let work = buffer;\n        if (buffer.sampleRate !== model.sampleRate) {\n          const offline = new OfflineAudioContext(buffer.numberOfChannels, Math.floor(buffer.duration * model.sampleRate), model.sampleRate);\n          const src = offline.createBufferSource();\n          src.buffer = buffer;\n          src.connect(offline.destination);\n          src.start();\n          work = yield offline.startRendering();\n        }\n        // For now send entire buffer; later chunking can be added.\n        const L = work.getChannelData(0);\n        const R = work.numberOfChannels > 1 ? work.getChannelData(1) : work.getChannelData(0);\n        const channels = [new Float32Array(L), new Float32Array(R)];\n        const result = yield new Promise((resolve, reject) => {\n          if (!_this2.worker) return reject(new Error('Worker missing'));\n          const handler = ev => {\n            if (ev.data.kind === 'progress') {\n              _this2.progress.set(ev.data);\n              opts?.onProgress?.(ev.data);\n            } else if (ev.data.kind === 'result') {\n              _this2.worker.removeEventListener('message', handler);\n              const outputs = ev.data.stems.map(s => ({\n                name: s.name,\n                audio: s.channels\n              }));\n              resolve(outputs);\n            } else if (ev.data.kind === 'error') {\n              _this2.worker.removeEventListener('message', handler);\n              reject(new Error(ev.data.error));\n            }\n          };\n          _this2.worker.addEventListener('message', handler);\n          const req = {\n            type: 'separate',\n            channels,\n            sampleRate: work.sampleRate\n          };\n          _this2.worker.postMessage(req, channels.map(c => c.buffer));\n        });\n        return result;\n      })();\n    }\n    static {\n      this.ɵfac = function OnnxSeparatorService_Factory(t) {\n        return new (t || OnnxSeparatorService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: OnnxSeparatorService,\n        factory: OnnxSeparatorService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return OnnxSeparatorService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}